{
  "scanId": "1755482304878",
  "timestamp": "2025-08-17T00:00:00.000Z",
  "ksiId": "KSI-CNA-04",
  "scanType": "automated",
  "status": "completed",
  "results": {
    "summary": {
      "totalChecks": 3,
      "passed": 2,
      "failed": 1,
      "warnings": 0
    },
    "immutabilityChecks": [
      {
        "checkId": "CNA-04-001",
        "name": "Container Image Immutability Validation",
        "status": "PASS",
        "severity": "HIGH",
        "description": "Container images should be immutable and not allow runtime modifications",
        "findings": {
          "containerConfiguration": {
            "readOnlyRootFilesystem": true,
            "runAsNonRoot": true,
            "allowPrivilegeEscalation": false,
            "capabilities": {
              "drop": ["ALL"],
              "add": []
            }
          },
          "imageSigning": {
            "enabled": true,
            "signingMethod": "Docker Content Trust",
            "notaryEnabled": true,
            "imageDigests": [
              "sha256:7d93a7e9f1b4d5e8f9c2a1b3e4f5g6h7i8j9k0l1m2n3o4p5q6r7s8t9u0v1w2x3"
            ]
          },
          "runtimeSecurity": {
            "seccompProfile": "RuntimeDefault",
            "apparmorProfile": "runtime/default",
            "selinuxOptions": {
              "level": "s0:c123,c456"
            }
          },
          "fileSystemProtection": {
            "tmpfsMount": "/tmp",
            "volumeMounts": [
              {
                "name": "config-volume",
                "mountPath": "/etc/config",
                "readOnly": true
              }
            ]
          },
          "validation": {
            "runtimeModificationsPrevented": true,
            "configurationDrift": false,
            "unauthorizedChangesBlocked": true
          }
        },
        "testResults": {
          "runtimeTests": [
            {
              "test": "Attempt to write to root filesystem",
              "result": "BLOCKED",
              "message": "Read-only filesystem prevents modifications"
            },
            {
              "test": "Attempt to install packages at runtime",
              "result": "BLOCKED",
              "message": "No package manager access in runtime environment"
            },
            {
              "test": "Attempt to modify system files",
              "result": "BLOCKED",
              "message": "Permission denied due to security context"
            }
          ]
        },
        "remediation": "Container immutability properly configured and validated"
      },
      {
        "checkId": "CNA-04-002",
        "name": "Infrastructure as Code Immutability",
        "status": "PASS",
        "severity": "MEDIUM",
        "description": "Infrastructure should be deployed through immutable IaC templates",
        "findings": {
          "deploymentMethod": {
            "type": "Azure Resource Manager (ARM)",
            "templateSource": "Azure DevOps Repository",
            "versionControl": true,
            "branchProtection": true
          },
          "changeManagement": {
            "manualChangesBlocked": true,
            "driftDetection": true,
            "automaticRemediation": true,
            "approvalProcess": "Required for production deployments"
          },
          "resourceLocking": {
            "lockType": "CanNotDelete",
            "scope": "ResourceGroup",
            "criticalResources": ["Storage Account", "Key Vault", "Virtual Network"]
          },
          "templateValidation": {
            "syntaxValidation": true,
            "securityValidation": true,
            "complianceValidation": true,
            "lastValidated": "2025-08-17T00:00:00.000Z"
          },
          "auditTrail": {
            "deploymentHistory": true,
            "changeTracking": true,
            "rollbackCapability": true
          }
        },
        "testResults": {
          "driftTests": [
            {
              "resource": "Storage Account",
              "configurationDrift": false,
              "lastChecked": "2025-08-17T00:00:00.000Z"
            },
            {
              "resource": "Key Vault",
              "configurationDrift": false,
              "lastChecked": "2025-08-17T00:00:00.000Z"
            }
          ]
        },
        "remediation": "Infrastructure immutability properly implemented through IaC"
      },
      {
        "checkId": "CNA-04-003",
        "name": "Storage Account Configuration Mutability",
        "status": "FAIL",
        "severity": "HIGH",
        "description": "Storage accounts should have immutable blob storage enabled for compliance data",
        "findings": {
          "blobImmutability": {
            "immutableBlobsEnabled": false,
            "legalHoldEnabled": false,
            "timeBasedRetentionEnabled": false,
            "issue": "Immutable blob storage not configured for compliance data"
          },
          "versioningConfiguration": {
            "blobVersioningEnabled": true,
            "changeTrackingEnabled": false,
            "softDeleteEnabled": true,
            "softDeleteRetentionDays": 7,
            "issue": "Insufficient retention period for compliance requirements"
          },
          "accessControls": {
            "publicAccess": "Disabled",
            "sharedKeyAccess": "Enabled",
            "issue": "Shared key access allows bypassing RBAC controls"
          },
          "dataProtection": {
            "encryptionAtRest": true,
            "encryptionInTransit": true,
            "customerManagedKeys": false,
            "issue": "Using Microsoft-managed keys instead of customer-managed keys"
          },
          "complianceGaps": [
            {
              "requirement": "FedRAMP AC-16 (Data Tagging)",
              "status": "NON_COMPLIANT",
              "issue": "No immutability tags on compliance data"
            },
            {
              "requirement": "FedRAMP AU-11 (Audit Record Retention)",
              "status": "NON_COMPLIANT",
              "issue": "Audit logs can be modified or deleted"
            }
          ]
        },
        "vulnerabilityAssessment": {
          "dataIntegrityRisk": "HIGH",
          "complianceRisk": "HIGH",
          "potentialImpacts": [
            "Audit log tampering",
            "Evidence modification",
            "Compliance violations",
            "Data integrity compromise"
          ]
        },
        "testResults": {
          "integrityTests": [
            {
              "test": "Attempt to modify archived compliance document",
              "result": "ALLOWED",
              "issue": "Document was successfully modified without audit trail"
            },
            {
              "test": "Attempt to delete audit log entries",
              "result": "ALLOWED",
              "issue": "Audit logs can be deleted by users with sufficient permissions"
            }
          ]
        },
        "remediation": "IMMEDIATE ACTION REQUIRED: 1) Enable immutable blob storage with time-based retention policy of 7 years, 2) Configure legal hold for litigation purposes, 3) Disable shared key access, 4) Implement customer-managed encryption keys, 5) Enable blob change feed for audit trail, 6) Apply resource locks to prevent accidental deletion"
      }
    ],
    "immutabilityBestPractices": {
      "containerSecurity": [
        "Use read-only root filesystems",
        "Drop all capabilities and add only necessary ones",
        "Run as non-root user",
        "Use distroless or minimal base images",
        "Implement image signing and verification"
      ],
      "infrastructureSecurity": [
        "Deploy through Infrastructure as Code only",
        "Enable drift detection and automatic remediation",
        "Use resource locks on critical resources",
        "Implement change approval workflows",
        "Maintain immutable infrastructure artifacts"
      ],
      "dataSecurity": [
        "Enable immutable blob storage for compliance data",
        "Configure time-based retention policies",
        "Use customer-managed encryption keys",
        "Implement legal hold capabilities",
        "Enable comprehensive audit logging"
      ]
    },
    "detectionMethods": {
      "containerChecks": [
        "kubectl get pods -o jsonpath='{.items[*].spec.securityContext.readOnlyRootFilesystem}'",
        "docker inspect <container> | jq '.HostConfig.ReadonlyRootfs'"
      ],
      "infrastructureChecks": [
        "az group deployment list --resource-group fedramp-rg",
        "az resource lock list --resource-group fedramp-rg"
      ],
      "storageChecks": [
        "az storage account blob-service-properties show --account-name fedramp20xstorage",
        "az storage container immutability-policy show --account-name fedramp20xstorage --container-name compliance-data"
      ]
    }
  }
}
