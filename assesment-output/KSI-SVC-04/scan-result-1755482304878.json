{
  "scanId": "1755482304878",
  "timestamp": "2025-08-17T00:00:00.000Z",
  "ksiId": "KSI-SVC-04",
  "scanType": "automated",
  "status": "completed",
  "results": {
    "summary": {
      "totalChecks": 7,
      "passed": 3,
      "failed": 4,
      "warnings": 0
    },
    "centralConfigurationManagementChecks": [
      {
        "checkId": "SVC-04-001",
        "name": "Azure App Configuration Service Implementation",
        "status": "PASS",
        "severity": "MEDIUM",
        "description": "Application configuration should be centrally managed through Azure App Configuration",
        "findings": {
          "centralConfigurationStore": {
            "enabled": true,
            "service": "Azure App Configuration",
            "sku": "Standard",
            "endpoint": "https://fedramp20x-appconfig.azconfig.io",
            "encryption": {
              "customerManagedKeys": true,
              "keyVaultUri": "https://fedramp20x-keyvault.vault.azure.net/keys/appconfig-key"
            }
          },
          "configurationManagement": {
            "keyValuePairs": 145,
            "featureFlags": 23,
            "keyVaultReferences": 18,
            "labeling": {
              "environments": ["dev", "staging", "prod"],
              "components": ["frontend", "backend", "database", "monitoring"]
            }
          },
          "accessControl": {
            "roleBasedAccess": true,
            "managedIdentities": [
              {
                "name": "webapp-identity",
                "type": "UserAssigned",
                "permissions": ["App Configuration Data Reader"]
              },
              {
                "name": "function-identity",
                "type": "SystemAssigned",
                "permissions": ["App Configuration Data Reader"]
              }
            ],
            "networkAccess": {
              "publicAccess": false,
              "privateEndpoints": [
                "/subscriptions/12345/resourceGroups/fedramp-rg/providers/Microsoft.Network/privateEndpoints/appconfig-pe"
              ],
              "firewallRules": "Deny all public access"
            }
          },
          "integrationPattern": {
            "applications": [
              {
                "name": "fedramp-webapp",
                "integrationType": "Azure App Configuration Provider",
                "refreshInterval": "30s",
                "sentinelKey": "config:sentinel"
              },
              {
                "name": "fedramp-api",
                "integrationType": "Configuration Builder",
                "refreshInterval": "60s",
                "caching": true
              }
            ],
            "deployment": {
              "configurationAsCode": true,
              "versionControl": "Git repository",
              "deploymentPipeline": "Azure DevOps with approval gates"
            }
          },
          "monitoringAndAuditing": {
            "auditLogs": {
              "enabled": true,
              "logAnalyticsWorkspace": "/subscriptions/12345/resourceGroups/fedramp-rg/providers/Microsoft.OperationalInsights/workspaces/fedramp-logs"
            },
            "alerting": {
              "configurationChanges": true,
              "unauthorizedAccess": true,
              "healthMonitoring": true
            }
          }
        },
        "testResults": [
          {
            "test": "Configuration centralization verification",
            "result": "CENTRALIZED",
            "details": "All application settings managed through App Configuration"
          },
          {
            "test": "Access control validation",
            "result": "SECURE",
            "details": "RBAC and private endpoints properly configured"
          },
          {
            "test": "Configuration versioning check",
            "result": "VERSIONED",
            "details": "Point-in-time snapshots and labeling active"
          }
        ],
        "complianceAlignment": [
          {
            "framework": "FedRAMP CM-2",
            "requirement": "Baseline Configuration",
            "status": "COMPLIANT",
            "evidence": "Centralized configuration with version control"
          }
        ],
        "remediation": "Configuration properly centralized through Azure App Configuration with appropriate security controls"
      },
      {
        "checkId": "SVC-04-002",
        "name": "Azure Key Vault Secrets Management",
        "status": "PASS",
        "severity": "HIGH",
        "description": "Sensitive configuration data should be stored in Azure Key Vault with proper access controls",
        "findings": {
          "secretsManagement": {
            "totalSecrets": 42,
            "secretTypes": [
              {
                "type": "Database Connection Strings",
                "count": 8,
                "naming": "db-{environment}-{component}"
              },
              {
                "type": "API Keys",
                "count": 15,
                "naming": "api-{service}-{environment}"
              },
              {
                "type": "Certificate References",
                "count": 12,
                "naming": "cert-{purpose}-{environment}"
              },
              {
                "type": "Encryption Keys",
                "count": 7,
                "naming": "key-{algorithm}-{purpose}"
              }
            ]
          },
          "accessManagement": {
            "rbacEnabled": true,
            "accessPolicies": "None (RBAC only)",
            "principalAccess": [
              {
                "principal": "fedramp-webapp-identity",
                "role": "Key Vault Secrets User",
                "scope": "Secrets: api-*, db-prod-*"
              },
              {
                "principal": "DevOps Service Connection",
                "role": "Key Vault Contributor",
                "scope": "All secrets (deployment only)",
                "condition": "IP restriction to Azure DevOps agents"
              }
            ]
          },
          "securityConfiguration": {
            "softDeleteEnabled": true,
            "purgeProtectionEnabled": true,
            "networkAccess": {
              "defaultAction": "Deny",
              "privateEndpoint": true,
              "trustedServices": true,
              "ipRules": []
            },
            "monitoring": {
              "diagnosticLogs": true,
              "logDestination": "Log Analytics + Storage Account",
              "metricsEnabled": true
            }
          },
          "secretRotation": {
            "automaticRotation": {
              "enabled": true,
              "policies": [
                {
                  "secretType": "Storage Account Keys",
                  "rotationPeriod": "P90D",
                  "preExpiry": "P30D"
                },
                {
                  "secretType": "Service Principal Secrets",
                  "rotationPeriod": "P180D",
                  "preExpiry": "P30D"
                }
              ]
            }
          }
        },
        "testResults": [
          {
            "test": "Secret accessibility verification",
            "result": "ACCESSIBLE",
            "details": "Applications can retrieve secrets via managed identity"
          },
          {
            "test": "Access control validation",
            "result": "RESTRICTED",
            "details": "Least privilege access enforced"
          },
          {
            "test": "Secret rotation check",
            "result": "AUTOMATED",
            "details": "Automatic rotation policies active"
          }
        ],
        "remediation": "Key Vault properly configured for centralized secrets management"
      },
      {
        "checkId": "SVC-04-003",
        "name": "Azure Policy Governance Implementation",
        "status": "PASS",
        "severity": "MEDIUM",
        "description": "Configuration standards should be enforced through Azure Policy",
        "findings": {
          "policyImplementation": {
            "totalPolicies": 67,
            "policyCategories": [
              {
                "category": "Security",
                "count": 28,
                "enforcement": "Enforce"
              },
              {
                "category": "Compliance",
                "count": 21,
                "enforcement": "Audit"
              },
              {
                "category": "Cost Management",
                "count": 18,
                "enforcement": "Audit"
              }
            ],
            "customPolicies": 15,
            "builtInPolicies": 52
          },
          "complianceAssessment": {
            "overallCompliance": "87%",
            "compliantResources": 234,
            "nonCompliantResources": 35,
            "exemptions": 8,
            "policyAssignments": [
              {
                "name": "FedRAMP Baseline Security",
                "scope": "/subscriptions/12345",
                "compliance": "91%"
              },
              {
                "name": "Network Security Standards",
                "scope": "/subscriptions/12345/resourceGroups/fedramp-rg",
                "compliance": "95%"
              }
            ]
          },
          "configurationStandards": {
            "storageAccountEncryption": {
              "required": true,
              "enforcement": "Deny",
              "compliance": "100%"
            },
            "vmDiskEncryption": {
              "required": true,
              "enforcement": "Audit",
              "compliance": "78%"
            },
            "networkSecurityGroups": {
              "required": true,
              "enforcement": "Modify",
              "compliance": "95%"
            }
          },
          "remediationTasks": {
            "automaticRemediation": true,
            "activeTasks": 12,
            "completedTasks": 156,
            "failedTasks": 3
          }
        },
        "testResults": [
          {
            "test": "Policy enforcement verification",
            "result": "ENFORCED",
            "details": "Security policies actively preventing non-compliant deployments"
          },
          {
            "test": "Compliance monitoring check",
            "result": "MONITORED",
            "details": "Continuous compliance assessment active"
          },
          {
            "test": "Automatic remediation validation",
            "result": "FUNCTIONAL",
            "details": "Auto-remediation tasks completing successfully"
          }
        ],
        "remediation": "Azure Policy properly implementing configuration governance"
      },
      {
        "checkId": "SVC-04-004",
        "name": "Application Settings Scattered Across Resources",
        "status": "FAIL",
        "severity": "HIGH",
        "description": "Application configurations are decentralized and inconsistently managed",
        "findings": {
          "configurationSources": [
            {
              "location": "Web App Application Settings",
              "configCount": 47,
              "issues": [
                "Database connection strings stored in plaintext",
                "API keys visible in portal",
                "No version control for configuration changes",
                "Environment-specific configs mixed together"
              ]
            },
            {
              "location": "Azure Function App Settings",
              "configCount": 23,
              "issues": [
                "Duplicate configuration entries",
                "Hardcoded secrets in application settings",
                "No deployment slot configurations",
                "Manual configuration management"
              ]
            },
            {
              "location": "Container Environment Variables",
              "configCount": 31,
              "issues": [
                "Secrets passed as environment variables",
                "No encryption at rest for config data",
                "Configuration drift between containers",
                "No centralized configuration source"
              ]
            },
            {
              "location": "Local Configuration Files",
              "configCount": 18,
              "issues": [
                "appsettings.json contains production secrets",
                "Config files in source control",
                "No configuration validation",
                "Manual deployment-time configuration"
              ]
            }
          ],
          "securityIssues": {
            "exposedSecrets": [
              {
                "type": "Database Connection String",
                "location": "Web App Settings",
                "severity": "CRITICAL",
                "exposure": "Plaintext in Azure Portal"
              },
              {
                "type": "Third-party API Key",
                "location": "Function App Settings",
                "severity": "HIGH",
                "exposure": "Visible to all contributors"
              },
              {
                "type": "Storage Account Key",
                "location": "Container Environment",
                "severity": "HIGH",
                "exposure": "Unencrypted environment variable"
              }
            ],
            "accessControl": {
              "issue": "No granular access control for configuration data",
              "impact": "All team members can view sensitive configuration"
            }
          },
          "operationalIssues": {
            "configurationDrift": {
              "detected": true,
              "environments": ["dev", "staging", "prod"],
              "driftCount": 23,
              "lastCheck": "2025-08-16T10:30:00.000Z"
            },
            "changeManagement": {
              "versionControl": false,
              "approvalProcess": false,
              "auditTrail": "Incomplete",
              "rollbackCapability": false
            },
            "deployment": {
              "manualSteps": 15,
              "errorRate": "23%",
              "deploymentTime": "45 minutes average",
              "rollbackTime": "Not available"
            }
          }
        },
        "vulnerabilityAssessment": {
          "riskLevel": "HIGH",
          "potentialImpacts": [
            "Unauthorized access to sensitive configuration data",
            "Configuration drift leading to security gaps",
            "Inability to quickly rotate compromised secrets",
            "Lack of audit trail for configuration changes",
            "Difficult incident response due to scattered configs"
          ]
        },
        "testResults": [
          {
            "test": "Configuration centralization check",
            "result": "SCATTERED",
            "details": "Configurations spread across 4+ different locations"
          },
          {
            "test": "Secret management validation",
            "result": "EXPOSED",
            "details": "Multiple secrets stored in plaintext"
          },
          {
            "test": "Change tracking verification",
            "result": "UNTRACKED",
            "details": "No centralized change auditing"
          }
        ],
        "complianceGaps": [
          {
            "requirement": "FedRAMP CM-2 (Baseline Configuration)",
            "status": "NON_COMPLIANT",
            "issue": "No centralized configuration management"
          },
          {
            "requirement": "FedRAMP CM-3 (Configuration Change Control)",
            "status": "NON_COMPLIANT",
            "issue": "Uncontrolled configuration changes"
          }
        ],
        "remediation": "CRITICAL: 1) Implement Azure App Configuration for centralized config management, 2) Migrate secrets to Azure Key Vault, 3) Remove hardcoded secrets from app settings, 4) Implement configuration as code with version control, 5) Establish approval processes for config changes, 6) Deploy configuration scanning tools, 7) Create configuration drift detection automation"
      },
      {
        "checkId": "SVC-04-005",
        "name": "Infrastructure Configuration Management Gaps",
        "status": "FAIL",
        "severity": "HIGH",
        "description": "Infrastructure configurations lack centralized management and version control",
        "findings": {
          "infrastructureAsCode": {
            "implementationStatus": "Partial",
            "coverage": "34%",
            "issues": [
              {
                "resource": "Virtual Machines",
                "deploymentMethod": "Manual Portal Creation",
                "versionControl": false,
                "standardization": false
              },
              {
                "resource": "Network Security Groups",
                "deploymentMethod": "Mixed (Portal + ARM)",
                "versionControl": "Partial",
                "standardization": false
              },
              {
                "resource": "Storage Accounts",
                "deploymentMethod": "PowerShell Scripts",
                "versionControl": false,
                "standardization": false
              }
            ]
          },
          "configurationDrift": {
            "detectionEnabled": false,
            "lastAssessment": "Never",
            "knownDrift": [
              {
                "resource": "VM Scale Set Configuration",
                "deviation": "Custom extensions manually installed",
                "impact": "Security compliance unknown"
              },
              {
                "resource": "Load Balancer Rules",
                "deviation": "Rules modified outside of IaC",
                "impact": "Configuration not documented"
              }
            ]
          },
          "templateManagement": {
            "armTemplates": {
              "count": 12,
              "versionControl": "Local files only",
              "validation": false,
              "standardization": false
            },
            "bicepTemplates": {
              "count": 3,
              "versionControl": "Git repository",
              "validation": true,
              "standardization": "Partial"
            },
            "terraformModules": {
              "count": 0,
              "versionControl": "Not applicable",
              "validation": "Not applicable",
              "standardization": "Not applicable"
            }
          },
          "deploymentProcesses": {
            "automation": "Limited",
            "approvalGates": false,
            "testingPhases": false,
            "rollbackPlan": "Manual only",
            "deploymentFrequency": "Ad-hoc",
            "errorRate": "18%"
          }
        },
        "testResults": [
          {
            "test": "IaC coverage assessment",
            "result": "INSUFFICIENT",
            "details": "Only 34% of infrastructure managed as code"
          },
          {
            "test": "Configuration drift detection",
            "result": "UNMONITORED",
            "details": "No automated drift detection in place"
          },
          {
            "test": "Template standardization check",
            "result": "INCONSISTENT",
            "details": "No standard template library or validation"
          }
        ],
        "remediation": "HIGH PRIORITY: 1) Implement comprehensive Infrastructure as Code using Bicep/ARM templates, 2) Establish Git-based version control for all templates, 3) Deploy Azure Resource Manager Template Specs for standardization, 4) Configure Azure Policy for configuration compliance, 5) Implement Azure Automation State Configuration for drift detection, 6) Create automated deployment pipelines with approval gates"
      },
      {
        "checkId": "SVC-04-006",
        "name": "Database Configuration Management Issues",
        "status": "FAIL",
        "severity": "MEDIUM",
        "description": "Database configurations are manually managed without centralized control",
        "findings": {
          "configurationManagement": {
            "method": "Manual Portal/SSMS Configuration",
            "versionControl": false,
            "documentationStatus": "Incomplete",
            "standardization": false
          },
          "securitySettings": {
            "firewallRules": {
              "managed": "Manual",
              "count": 23,
              "standardization": false,
              "issues": ["Overly permissive rules", "No naming convention", "No approval process"]
            },
            "accessControl": {
              "managed": "Manual",
              "userCount": 47,
              "roleStandardization": false,
              "issues": [
                "Inconsistent role assignments",
                "No automated provisioning",
                "Manual password management"
              ]
            },
            "auditingConfiguration": {
              "managed": "Partially automated",
              "consistency": false,
              "issues": [
                "Different audit settings across databases",
                "Manual log destination configuration"
              ]
            }
          },
          "maintenanceConfiguration": {
            "automaticTuning": {
              "enabled": false,
              "reason": "Manual tuning preferred by DBA team"
            },
            "indexMaintenance": {
              "automated": false,
              "schedule": "Manual execution",
              "documentation": "Informal procedures"
            },
            "backupConfiguration": {
              "standardized": false,
              "issues": [
                "Different retention policies",
                "Manual backup verification",
                "No automated testing"
              ]
            }
          },
          "deploymentManagement": {
            "schemaChanges": {
              "process": "Manual SQL scripts",
              "versionControl": "Basic file storage",
              "testing": "Manual testing only",
              "rollback": "Manual script creation"
            },
            "dataUpdates": {
              "process": "Direct database modification",
              "approval": "Email-based approval",
              "auditing": "Limited logging"
            }
          }
        },
        "testResults": [
          {
            "test": "Configuration standardization check",
            "result": "INCONSISTENT",
            "details": "Different configuration patterns across databases"
          },
          {
            "test": "Change management validation",
            "result": "MANUAL",
            "details": "No automated change deployment process"
          },
          {
            "test": "Configuration documentation review",
            "result": "INCOMPLETE",
            "details": "Many configuration decisions undocumented"
          }
        ],
        "remediation": "MEDIUM PRIORITY: 1) Implement database configuration as code using SQL Database Project or Dacpac, 2) Standardize security configurations across all databases, 3) Implement automated schema deployment pipelines, 4) Create configuration templates for consistent deployment, 5) Establish change approval workflows, 6) Document all configuration standards and procedures"
      },
      {
        "checkId": "SVC-04-007",
        "name": "Monitoring and Alerting Configuration Inconsistencies",
        "status": "FAIL",
        "severity": "MEDIUM",
        "description": "Monitoring configurations are inconsistently applied across resources",
        "findings": {
          "monitoringStandardization": {
            "diagnosticSettings": {
              "coverage": "67%",
              "consistency": false,
              "issues": [
                "Different log categories enabled across similar resources",
                "Inconsistent retention periods",
                "Mixed destination configurations"
              ]
            },
            "metricAlerts": {
              "coverage": "45%",
              "standardization": false,
              "issues": [
                "Ad-hoc alert creation",
                "No standard thresholds for similar resources",
                "Inconsistent action group assignments"
              ]
            },
            "logAnalyticsWorkspaces": {
              "count": 3,
              "standardization": false,
              "issues": [
                "Multiple workspaces without clear purpose",
                "Different data retention policies",
                "Inconsistent access control"
              ]
            }
          },
          "alertManagement": {
            "actionGroups": {
              "count": 12,
              "organizationStandard": false,
              "issues": [
                "Duplicate action groups with different configurations",
                "No standardized escalation procedures",
                "Inconsistent notification channels"
              ]
            },
            "alertRules": {
              "total": 87,
              "standardized": 23,
              "customized": 64,
              "issues": [
                "Different alert thresholds for identical resources",
                "No standard alert descriptions or naming",
                "Manual alert rule creation"
              ]
            }
          },
          "configurationDeployment": {
            "method": "Manual Portal Configuration",
            "automation": false,
            "versionControl": false,
            "standardization": false,
            "issues": [
              "No Infrastructure as Code for monitoring",
              "Manual configuration leads to inconsistencies",
              "No approval process for monitoring changes"
            ]
          }
        },
        "testResults": [
          {
            "test": "Monitoring configuration consistency check",
            "result": "INCONSISTENT",
            "details": "Significant variations in monitoring setup across resources"
          },
          {
            "test": "Alert standardization validation",
            "result": "NON_STANDARDIZED",
            "details": "Most alerts created ad-hoc without standards"
          },
          {
            "test": "Configuration management assessment",
            "result": "MANUAL",
            "details": "No automated deployment of monitoring configurations"
          }
        ],
        "remediation": "MEDIUM PRIORITY: 1) Create standardized monitoring templates for each resource type, 2) Implement monitoring as code using ARM/Bicep templates, 3) Establish standard alert thresholds and action groups, 4) Consolidate Log Analytics workspaces based on purpose, 5) Create automated deployment pipeline for monitoring configurations, 6) Document monitoring standards and best practices"
      }
    ],
    "centralConfigurationManagementBestPractices": {
      "applicationConfiguration": [
        "Use Azure App Configuration for centralized app settings",
        "Store secrets in Azure Key Vault with proper access controls",
        "Implement configuration as code with version control",
        "Use environment-specific labeling and feature flags",
        "Enable configuration refresh without application restart"
      ],
      "infrastructureConfiguration": [
        "Implement Infrastructure as Code (IaC) using ARM/Bicep/Terraform",
        "Use Azure Resource Manager Template Specs for standardization",
        "Configure Azure Policy for compliance enforcement",
        "Implement configuration drift detection and remediation",
        "Establish approval workflows for infrastructure changes"
      ],
      "securityConfiguration": [
        "Centralize secrets management in Azure Key Vault",
        "Use managed identities for secure access to configuration",
        "Implement role-based access control for configuration access",
        "Enable audit logging for all configuration changes",
        "Encrypt configuration data at rest and in transit"
      ],
      "operationalConfiguration": [
        "Standardize monitoring and alerting configurations",
        "Use configuration management tools for consistency",
        "Implement automated configuration validation",
        "Create configuration backup and recovery procedures",
        "Establish configuration change approval processes"
      ]
    },
    "configurationVerificationMethods": {
      "azureAppConfiguration": [
        "Azure CLI: az appconfig show --name <config-store-name>",
        "PowerShell: Get-AzAppConfigurationStore",
        "REST API: GET /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}",
        "Azure Portal: App Configuration > Overview"
      ],
      "azureKeyVault": [
        "Azure CLI: az keyvault show --name <vault-name>",
        "PowerShell: Get-AzKeyVault",
        "REST API: GET /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}",
        "Azure Portal: Key Vault > Access policies"
      ],
      "azurePolicy": [
        "Azure CLI: az policy state list --resource <resource-id>",
        "PowerShell: Get-AzPolicyState",
        "REST API: POST /subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/latest/queryResults",
        "Azure Portal: Policy > Compliance"
      ],
      "infrastructureAsCode": [
        "Git repository audit for template versioning",
        "Azure DevOps pipeline logs for deployment tracking",
        "ARM template validation using az deployment validate",
        "Resource drift detection using Azure Resource Graph"
      ]
    },
    "complianceFrameworks": {
      "fedramp": {
        "CM-2": "Baseline Configuration",
        "CM-3": "Configuration Change Control",
        "CM-6": "Configuration Settings",
        "CM-8": "Information System Component Inventory"
      },
      "nist80053": {
        "CM-2": "Baseline Configuration",
        "CM-3": "Configuration Change Control",
        "CM-7": "Least Functionality",
        "CM-8": "Information System Component Inventory"
      },
      "iso27001": {
        "A.12.1.2": "Change management",
        "A.12.5.1": "Installation of software on operational systems",
        "A.14.2.2": "System change control procedures"
      }
    }
  }
}
