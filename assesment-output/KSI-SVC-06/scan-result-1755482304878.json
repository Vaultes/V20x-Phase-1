{
  "scanId": "1755482304878",
  "timestamp": "2025-08-17T00:00:00.000Z",
  "ksiId": "KSI-SVC-06",
  "scanType": "automated",
  "status": "completed",
  "results": {
    "summary": {
      "totalChecks": 7,
      "passed": 3,
      "failed": 4,
      "warnings": 0
    },
    "keyAndCertificateRotationBestPractices": {
      "automatedRotation": [
        "Configure automatic key rotation policies in Azure Key Vault",
        "Use Azure App Service managed certificates for automatic renewal",
        "Implement coordinated rotation across dependent services",
        "Establish pre-expiry notification and alerting systems"
      ],
      "certificateManagement": [
        "Use ACME protocol for automated certificate issuance",
        "Implement certificate lifecycle monitoring and reporting",
        "Configure automatic deployment to target services",
        "Establish rollback procedures for failed renewals"
      ],
      "servicePrincipalSecurity": [
        "Migrate to managed identities where possible",
        "Implement automated secret rotation for service principals",
        "Use Azure Key Vault for centralized secret management",
        "Configure coordinated updates across applications"
      ],
      "databaseSecurity": [
        "Use managed identities for database authentication",
        "Implement automated credential rotation procedures",
        "Store connection strings in Azure Key Vault",
        "Configure zero-downtime credential updates"
      ]
    },
    "rotationVerificationMethods": {
      "azureKeyVault": [
        "az keyvault key list --vault-name <vault> --query '[].{Name:name,Created:attributes.created,Updated:attributes.updated}'",
        "az keyvault certificate list --vault-name <vault> --query '[].{Name:name,Expires:attributes.expires}'",
        "Get-AzKeyVaultKey -VaultName <vault> | Select-Object Name, Created, Updated",
        "Azure Portal: Key Vault > Keys/Certificates > Versions"
      ],
      "appService": [
        "az webapp config ssl list --resource-group <rg> --name <app>",
        "az webapp config ssl show --resource-group <rg> --name <app> --certificate-thumbprint <thumbprint>",
        "Get-AzWebAppSSLBinding -ResourceGroupName <rg> -WebAppName <app>",
        "Azure Portal: App Service > TLS/SSL settings"
      ],
      "servicePrincipals": [
        "az ad sp list --query '[].{DisplayName:displayName,AppId:appId,PasswordCredentials:passwordCredentials}'",
        "az ad sp credential list --id <app-id>",
        "Get-AzADServicePrincipal | Select-Object DisplayName, ApplicationId, PasswordCredentials",
        "Azure Portal: Azure AD > App registrations > Certificates & secrets"
      ],
      "certificates": [
        "openssl x509 -in <cert> -text -noout | grep -E 'Not Before|Not After'",
        "Get-ChildItem Cert:\\LocalMachine\\My | Select-Object Subject, NotBefore, NotAfter",
        "certlm.msc (Windows Certificate Manager)",
        "curl -I <https-endpoint> | grep -i expire"
      ]
    },
    "complianceFrameworks": {
      "fedramp": {
        "SC-12": "Cryptographic Key Establishment and Management",
        "SC-17": "Public Key Infrastructure Certificates",
        "IA-5": "Authenticator Management"
      },
      "nist80053": {
        "SC-12": "Cryptographic Key Establishment and Management",
        "SC-17": "Public Key Infrastructure Certificates",
        "IA-5": "Authenticator Management",
        "SC-23": "Session Authenticity"
      },
      "iso27001": {
        "A.10.1.2": "Key management",
        "A.14.1.2": "Securing application services on public networks",
        "A.9.4.3": "Password management system"
      }
    },
    "checks": [
      {
        "checkId": "SVC-06-001",
        "name": "Azure Key Vault Automatic Key Rotation",
        "status": "PASS",
        "severity": "HIGH",
        "description": "Encryption keys should have automatic rotation policies configured",
        "findings": {
          "keyRotationPolicies": {
            "totalKeys": 24,
            "rotationEnabled": 20,
            "policies": [
              {
                "keyName": "storage-encryption-key",
                "rotationPeriod": "P90D",
                "preExpiryNotification": "P30D",
                "lastRotation": "2025-07-18T00:00:00.000Z",
                "nextRotation": "2025-10-16T00:00:00.000Z",
                "status": "Active"
              },
              {
                "keyName": "database-tde-key",
                "rotationPeriod": "P180D",
                "preExpiryNotification": "P45D",
                "lastRotation": "2025-06-01T00:00:00.000Z",
                "nextRotation": "2025-11-28T00:00:00.000Z",
                "status": "Active"
              },
              {
                "keyName": "application-encryption-key",
                "rotationPeriod": "P60D",
                "preExpiryNotification": "P15D",
                "lastRotation": "2025-08-01T00:00:00.000Z",
                "nextRotation": "2025-09-30T00:00:00.000Z",
                "status": "Active"
              }
            ]
          },
          "automatedRotationFeatures": {
            "keyVaultRotation": {
              "enabled": true,
              "autoRotationSupported": true,
              "notificationConfigured": true,
              "failureAlerts": true
            },
            "servicePrincipalSecrets": {
              "autoRotation": true,
              "rotationPeriod": "P180D",
              "coordinatedUpdates": true
            },
            "storageAccountKeys": {
              "autoRotation": true,
              "rotationPeriod": "P90D",
              "alternateKeyRotation": true
            }
          },
          "rotationMonitoring": {
            "auditLogging": {
              "enabled": true,
              "logDestination": "Log Analytics Workspace",
              "retentionPeriod": "P2555D"
            },
            "alerting": {
              "preExpiryAlerts": true,
              "rotationFailureAlerts": true,
              "unusedKeyAlerts": true,
              "actionGroups": [
                "security-team",
                "platform-ops"
              ]
            },
            "reporting": {
              "rotationDashboard": true,
              "complianceReporting": true,
              "keyInventoryTracking": true
            }
          },
          "integrationCapabilities": {
            "azureServices": [
              {
                "service": "Azure Storage",
                "autoRotationSupport": true,
                "coordinatedRotation": true
              },
              {
                "service": "Azure SQL Database",
                "autoRotationSupport": true,
                "coordinatedRotation": true
              },
              {
                "service": "Application Gateway",
                "autoRotationSupport": true,
                "coordinatedRotation": true
              }
            ]
          }
        },
        "testResults": [
          {
            "test": "Key rotation policy verification",
            "result": "CONFIGURED",
            "details": "20/24 keys have automatic rotation policies"
          },
          {
            "test": "Rotation execution validation",
            "result": "SUCCESSFUL",
            "details": "All recent rotations completed successfully"
          },
          {
            "test": "Service integration check",
            "result": "COORDINATED",
            "details": "Key rotation coordinated across dependent services"
          }
        ],
        "remediation": "Key rotation properly automated with comprehensive monitoring",
        "checkType": "keyAndCertificateRotatio"
      },
      {
        "checkId": "SVC-06-002",
        "name": "SSL/TLS Certificate Lifecycle Management",
        "status": "PASS",
        "severity": "HIGH",
        "description": "SSL/TLS certificates should have automated renewal and deployment",
        "findings": {
          "certificateInventory": {
            "totalCertificates": 18,
            "autoRenewalEnabled": 15,
            "certificates": [
              {
                "name": "fedramp-webapp-ssl",
                "issuer": "DigiCert",
                "validFrom": "2025-01-15T00:00:00.000Z",
                "validTo": "2026-01-15T00:00:00.000Z",
                "autoRenewal": true,
                "renewalThreshold": "P60D",
                "deploymentTargets": [
                  "Application Gateway",
                  "Front Door"
                ]
              },
              {
                "name": "api-fedramp-gov-ssl",
                "issuer": "Let's Encrypt",
                "validFrom": "2025-06-17T00:00:00.000Z",
                "validTo": "2025-09-15T00:00:00.000Z",
                "autoRenewal": true,
                "renewalThreshold": "P30D",
                "deploymentTargets": [
                  "Application Gateway"
                ]
              },
              {
                "name": "vpn-gateway-cert",
                "issuer": "Internal CA",
                "validFrom": "2025-03-01T00:00:00.000Z",
                "validTo": "2027-03-01T00:00:00.000Z",
                "autoRenewal": true,
                "renewalThreshold": "P90D",
                "deploymentTargets": [
                  "VPN Gateway"
                ]
              }
            ]
          },
          "renewalAutomation": {
            "acmeProtocol": {
              "enabled": true,
              "provider": "Let's Encrypt",
              "challengeType": "DNS-01",
              "automatedValidation": true
            },
            "caIntegration": {
              "internalCA": true,
              "externalCA": true,
              "certificateTemplates": 5,
              "approvalWorkflow": "Automated"
            },
            "deploymentAutomation": {
              "azureKeyVault": true,
              "applicationGateway": true,
              "frontDoor": true,
              "appService": true,
              "kubernetesSecrets": true
            }
          },
          "lifecycleManagement": {
            "expiryMonitoring": {
              "alertThresholds": [
                "P90D",
                "P60D",
                "P30D",
                "P7D"
              ],
              "notificationChannels": [
                "Email",
                "Teams",
                "Azure Monitor"
              ],
              "escalationPolicy": true
            },
            "renewalTracking": {
              "successfulRenewals": 47,
              "failedRenewals": 2,
              "averageRenewalTime": "PT15M",
              "lastRenewalIssue": "2025-07-23T10:30:00.000Z"
            },
            "deploymentValidation": {
              "postDeploymentTesting": true,
              "rollbackCapability": true,
              "healthChecks": true
            }
          }
        },
        "testResults": [
          {
            "test": "Certificate renewal automation",
            "result": "AUTOMATED",
            "details": "15/18 certificates have auto-renewal configured"
          },
          {
            "test": "Deployment automation check",
            "result": "FUNCTIONAL",
            "details": "Certificates automatically deployed to target services"
          },
          {
            "test": "Expiry monitoring validation",
            "result": "MONITORED",
            "details": "Multi-threshold alerting active for all certificates"
          }
        ],
        "remediation": "Certificate lifecycle properly automated with comprehensive monitoring",
        "checkType": "keyAndCertificateRotatio"
      },
      {
        "checkId": "SVC-06-003",
        "name": "Azure App Service Managed Certificate Automation",
        "status": "PASS",
        "severity": "MEDIUM",
        "description": "App Service should use managed certificates with automatic renewal",
        "findings": {
          "managedCertificates": {
            "enabled": true,
            "certificateCount": 3,
            "certificates": [
              {
                "hostname": "fedramp20x.azurewebsites.net",
                "certificateType": "App Service Managed",
                "issuer": "Microsoft Azure TLS Issuing CA 01",
                "validFrom": "2025-07-01T00:00:00.000Z",
                "validTo": "2026-07-01T00:00:00.000Z",
                "autoRenewal": true,
                "renewalStatus": "Active"
              },
              {
                "hostname": "api.fedramp20x.gov",
                "certificateType": "App Service Managed",
                "issuer": "Microsoft Azure TLS Issuing CA 02",
                "validFrom": "2025-06-15T00:00:00.000Z",
                "validTo": "2026-06-15T00:00:00.000Z",
                "autoRenewal": true,
                "renewalStatus": "Active"
              }
            ]
          },
          "renewalConfiguration": {
            "automaticRenewal": true,
            "renewalThreshold": "P60D",
            "healthChecks": true,
            "rollbackOnFailure": true
          },
          "domainValidation": {
            "method": "HTTP-01 Challenge",
            "automatedValidation": true,
            "validationFrequency": "Continuous"
          },
          "monitoring": {
            "renewalAlerts": true,
            "expiryWarnings": true,
            "healthChecks": true,
            "auditLogging": true
          }
        },
        "testResults": [
          {
            "test": "Managed certificate status",
            "result": "ACTIVE",
            "details": "All custom domains using managed certificates"
          },
          {
            "test": "Auto-renewal verification",
            "result": "ENABLED",
            "details": "Automatic renewal active for all certificates"
          },
          {
            "test": "Domain validation check",
            "result": "AUTOMATED",
            "details": "Continuous domain validation configured"
          }
        ],
        "remediation": "App Service managed certificates properly configured",
        "checkType": "keyAndCertificateRotatio"
      },
      {
        "checkId": "SVC-06-004",
        "name": "Manual Certificate Management on Legacy Systems",
        "status": "FAIL",
        "severity": "CRITICAL",
        "description": "Legacy systems using manual certificate management without rotation automation",
        "findings": {
          "certificateInventory": {
            "totalCertificates": 12,
            "expiredCertificates": 3,
            "soonToExpire": 4,
            "manualManagement": 12,
            "criticalCertificates": [
              {
                "name": "legacy-api-ssl.crt",
                "location": "/etc/ssl/certs/",
                "issuer": "Internal CA",
                "validFrom": "2023-08-01T00:00:00.000Z",
                "validTo": "2025-08-01T00:00:00.000Z",
                "daysUntilExpiry": 0,
                "status": "EXPIRED",
                "severity": "CRITICAL"
              },
              {
                "name": "database-client.p12",
                "location": "/opt/app/certs/",
                "issuer": "Self-signed",
                "validFrom": "2024-01-15T00:00:00.000Z",
                "validTo": "2025-01-15T00:00:00.000Z",
                "daysUntilExpiry": -214,
                "status": "EXPIRED",
                "severity": "CRITICAL"
              },
              {
                "name": "ldap-server.crt",
                "location": "/etc/ldap/ssl/",
                "issuer": "Corporate CA",
                "validFrom": "2024-06-01T00:00:00.000Z",
                "validTo": "2025-09-01T00:00:00.000Z",
                "daysUntilExpiry": 15,
                "status": "EXPIRING_SOON",
                "severity": "HIGH"
              }
            ]
          },
          "rotationProcessIssues": {
            "automationLevel": "None",
            "manualProcesses": [
              "Certificate generation requires manual CA interaction",
              "No automated deployment process",
              "Service restart required for certificate updates",
              "No rollback capability for failed updates"
            ],
            "documentationStatus": "Outdated",
            "procedureCompliance": "Inconsistent",
            "responsibleParties": "Unclear ownership"
          },
          "monitoringGaps": {
            "expiryTracking": {
              "automated": false,
              "method": "Manual spreadsheet",
              "lastUpdate": "2025-05-15T00:00:00.000Z",
              "accuracy": "Poor"
            },
            "alerting": {
              "configured": false,
              "notifications": "Email only",
              "escalation": "None"
            },
            "auditTrail": {
              "maintained": false,
              "lastAudit": "2024-12-01T00:00:00.000Z",
              "compliance": "Unknown"
            }
          },
          "businessImpact": {
            "servicesAffected": 8,
            "userImpact": "Authentication failures",
            "availabilityRisk": "HIGH",
            "securityRisk": "CRITICAL",
            "complianceRisk": "HIGH"
          }
        },
        "testResults": [
          {
            "test": "Certificate expiry check",
            "result": "EXPIRED",
            "details": "3 certificates expired, 4 expiring within 30 days"
          },
          {
            "test": "Automation assessment",
            "result": "MANUAL",
            "details": "No automated certificate management processes"
          },
          {
            "test": "Monitoring capability",
            "result": "INADEQUATE",
            "details": "No automated expiry monitoring or alerting"
          }
        ],
        "complianceGaps": [
          {
            "requirement": "FedRAMP SC-12 (Cryptographic Key Establishment and Management)",
            "status": "NON_COMPLIANT",
            "issue": "Manual key/certificate management without proper controls"
          }
        ],
        "remediation": "CRITICAL: 1) Immediately replace expired certificates, 2) Implement automated certificate discovery and inventory, 3) Deploy certificate lifecycle management solution, 4) Establish automated renewal processes, 5) Configure comprehensive monitoring and alerting, 6) Create documented procedures and assign ownership, 7) Plan migration to Azure Key Vault or equivalent solution",
        "checkType": "keyAndCertificateRotatio"
      },
      {
        "checkId": "SVC-06-005",
        "name": "Service Principal Secret Rotation Failures",
        "status": "FAIL",
        "severity": "HIGH",
        "description": "Service principal secrets lack automated rotation causing security risks",
        "findings": {
          "servicePrincipalSecrets": {
            "totalPrincipals": 23,
            "secretRotationEnabled": 8,
            "rotationIssues": [
              {
                "principalName": "fedramp-legacy-api-sp",
                "applicationId": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
                "secretCount": 2,
                "oldestSecret": {
                  "createdDate": "2023-11-15T00:00:00.000Z",
                  "expiryDate": "2025-11-15T00:00:00.000Z",
                  "daysUntilExpiry": 90,
                  "lastUsed": "2025-08-16T14:30:00.000Z",
                  "rotationOverdue": true
                },
                "rotationPolicy": "None configured",
                "usage": "Active in production"
              },
              {
                "principalName": "database-backup-sp",
                "applicationId": "b2c3d4e5-f6g7-8901-2345-67890bcdefg1",
                "secretCount": 1,
                "oldestSecret": {
                  "createdDate": "2024-02-01T00:00:00.000Z",
                  "expiryDate": "2025-08-01T00:00:00.000Z",
                  "daysUntilExpiry": -16,
                  "lastUsed": "2025-08-17T02:00:00.000Z",
                  "rotationOverdue": true,
                  "status": "EXPIRED"
                },
                "rotationPolicy": "Manual only",
                "usage": "Critical backup operations"
              }
            ]
          },
          "rotationAutomationGaps": {
            "automatedRotation": {
              "implemented": false,
              "coverage": "35%",
              "tooling": "Limited Azure Automation"
            },
            "coordinatedUpdates": {
              "keyVaultSecrets": false,
              "applicationSettings": false,
              "configurationFiles": false
            },
            "testingAndValidation": {
              "preRotationTesting": false,
              "postRotationValidation": false,
              "rollbackCapability": false
            }
          },
          "monitoringDeficiencies": {
            "expiryTracking": {
              "automated": false,
              "alerting": "Basic email only",
              "dashboards": false
            },
            "usageMonitoring": {
              "activeSecrets": "Not tracked",
              "unusedSecrets": "Not identified",
              "accessPatterns": "Not analyzed"
            },
            "auditCapabilities": {
              "rotationHistory": "Incomplete",
              "accessLogs": "Basic only",
              "complianceReporting": "Manual"
            }
          }
        },
        "testResults": [
          {
            "test": "Secret expiry status check",
            "result": "EXPIRED",
            "details": "Multiple service principal secrets expired or expiring soon"
          },
          {
            "test": "Rotation automation assessment",
            "result": "INADEQUATE",
            "details": "35% coverage with automated rotation"
          },
          {
            "test": "Monitoring capability evaluation",
            "result": "INSUFFICIENT",
            "details": "Limited visibility into secret lifecycle"
          }
        ],
        "remediation": "HIGH PRIORITY: 1) Immediately rotate expired secrets, 2) Implement Azure Key Vault for service principal secret management, 3) Configure automated rotation policies, 4) Deploy secret lifecycle monitoring, 5) Establish coordinated update procedures, 6) Create comprehensive alerting and reporting, 7) Migrate to managed identities where possible",
        "checkType": "keyAndCertificateRotatio"
      },
      {
        "checkId": "SVC-06-006",
        "name": "Database Connection String Rotation Gaps",
        "status": "FAIL",
        "severity": "HIGH",
        "description": "Database connection strings and authentication credentials lack proper rotation",
        "findings": {
          "connectionStringManagement": {
            "totalConnections": 18,
            "rotationEnabled": 4,
            "managementIssues": [
              {
                "database": "customer-production-db",
                "connectionType": "SQL Authentication",
                "username": "app_user_prod",
                "passwordAge": "P547D",
                "lastRotation": "2023-12-15T00:00:00.000Z",
                "rotationPolicy": "None",
                "usage": "Primary application connection"
              },
              {
                "database": "reporting-db",
                "connectionType": "SQL Authentication",
                "username": "report_service",
                "passwordAge": "P823D",
                "lastRotation": "2023-04-10T00:00:00.000Z",
                "rotationPolicy": "Manual annual",
                "usage": "Business intelligence reports"
              },
              {
                "database": "audit-db",
                "connectionType": "Integrated Authentication",
                "username": "DOMAIN\\audit-service",
                "passwordAge": "N/A",
                "managedIdentity": false,
                "usage": "Compliance audit logging"
              }
            ]
          },
          "credentialStorageIssues": {
            "applicationSettings": {
              "plainTextStorage": true,
              "count": 12,
              "encryption": false,
              "accessControl": "Broad"
            },
            "configurationFiles": {
              "hardcodedCredentials": true,
              "count": 6,
              "versionControlExposure": true
            },
            "keyVaultIntegration": {
              "implemented": false,
              "coverage": "22%",
              "automaticUpdates": false
            }
          },
          "rotationChallenges": {
            "applicationDowntime": {
              "required": true,
              "duration": "PT30M",
              "coordinationRequired": true
            },
            "multipleApplications": {
              "sharedCredentials": true,
              "coordinatedUpdates": false,
              "testingComplexity": "High"
            },
            "rollbackCapability": {
              "implemented": false,
              "testing": "Limited",
              "documentation": "Incomplete"
            }
          }
        },
        "testResults": [
          {
            "test": "Credential age assessment",
            "result": "STALE",
            "details": "Multiple credentials over 1 year old"
          },
          {
            "test": "Storage security evaluation",
            "result": "INSECURE",
            "details": "Credentials stored in plaintext in multiple locations"
          },
          {
            "test": "Rotation capability check",
            "result": "MANUAL",
            "details": "No automated credential rotation processes"
          }
        ],
        "remediation": "HIGH PRIORITY: 1) Migrate to managed identities where possible, 2) Store database credentials in Azure Key Vault, 3) Implement automated credential rotation, 4) Remove hardcoded credentials from configuration, 5) Establish coordinated update procedures, 6) Create rollback and testing procedures, 7) Configure comprehensive monitoring and alerting",
        "checkType": "keyAndCertificateRotatio"
      },
      {
        "checkId": "SVC-06-007",
        "name": "API Key and Token Management Deficiencies",
        "status": "FAIL",
        "severity": "MEDIUM",
        "description": "API keys and authentication tokens lack proper lifecycle management",
        "findings": {
          "apiKeyInventory": {
            "totalKeys": 34,
            "rotationEnabled": 9,
            "keyCategories": [
              {
                "category": "Third-party Service Integration",
                "count": 18,
                "averageAge": "P245D",
                "rotationFrequency": "Manual/Irregular",
                "expirationTracking": false
              },
              {
                "category": "Internal API Authentication",
                "count": 10,
                "averageAge": "P156D",
                "rotationFrequency": "None",
                "expirationTracking": false
              },
              {
                "category": "External Client Access",
                "count": 6,
                "averageAge": "P89D",
                "rotationFrequency": "Client initiated",
                "expirationTracking": "Partial"
              }
            ]
          },
          "tokenManagementIssues": {
            "jwtTokens": {
              "signingKeyRotation": false,
              "keyAge": "P365D",
              "algorithmUpgrade": "Needed",
              "expirationValidation": "Inconsistent"
            },
            "refreshTokens": {
              "rotationOnUse": false,
              "maximumLifetime": "P30D",
              "revocationCapability": "Limited"
            },
            "accessTokens": {
              "shortLived": false,
              "averageLifetime": "P7D",
              "scopeValidation": "Basic"
            }
          },
          "lifecycleManagementGaps": {
            "keyGeneration": {
              "automated": false,
              "entropy": "Adequate",
              "uniqueness": "Not enforced"
            },
            "distribution": {
              "secureChannels": "Inconsistent",
              "accessControls": "Basic",
              "auditTrail": "Incomplete"
            },
            "revocation": {
              "capability": "Limited",
              "propagation": "Slow",
              "verification": "Manual"
            }
          }
        },
        "testResults": [
          {
            "test": "API key age evaluation",
            "result": "STALE",
            "details": "Average key age exceeds recommended rotation frequency"
          },
          {
            "test": "Token lifecycle assessment",
            "result": "SUBOPTIMAL",
            "details": "Limited token rotation and lifecycle controls"
          },
          {
            "test": "Management automation check",
            "result": "MANUAL",
            "details": "Most key/token operations require manual intervention"
          }
        ],
        "remediation": "MEDIUM PRIORITY: 1) Implement automated API key rotation, 2) Configure JWT signing key rotation, 3) Establish token lifecycle policies, 4) Deploy key management automation, 5) Create comprehensive inventory and monitoring, 6) Implement secure key distribution, 7) Establish revocation and audit capabilities",
        "checkType": "keyAndCertificateRotatio"
      }
    ]
  }
}